{"version":3,"sources":["components/NavBar.js","components/Banner.js","components/IconCard.js","App.js","serviceWorker.js","index.js"],"names":["style","bgDark","backgroundColor","NavBar","props","react_default","a","createElement","className","title","status","currentScore","topScore","logoIcon","width","heigth","Banner","src","alt","IconCard","id","value","onClick","clickedPlayer","image","shuffleArray","array","counter","length","index","Math","floor","random","temp","App","state","result","clicked","Icons","gameOver","console","log","concat","_this","includes","resetGame","pointIncrease","push","setState","score","resetIconArray","points","newScramble","this","_this2","components_NavBar","components_Banner","map","icon","components_IconCard","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.94a7a6bc.chunk.js","sourcesContent":["import React from \"react\";\r\n// import \"tachyons\";\r\n\r\nconst style = {\r\n  bgDark: {\r\n    backgroundColor: `#572364`\r\n  }\r\n}\r\n\r\nconst NavBar = props => (\r\n  <header style={style.bgDark} className=\" w-100 ph3 pv3 pv2-ns ph4-m ph5-l tc\">\r\n    <nav className=\"f6 fw6 ttu tracked\">\r\n      <p className=\"link dim white dib mr3\"  title=\"Home\">Clicky Game</p>\r\n      <p className=\"link dim white dib mr3\" >Status: {props.status}</p>\r\n      <p className=\"link dim white dib mr3\" title=\"Store\">Score: {props.currentScore}</p>\r\n      <p className=\"link dim white dib\" title=\"Contact\">Top Score: {props.topScore}</p>\r\n    </nav>\r\n  </header>\r\n)\r\n\r\nexport default NavBar;","\r\nimport React from 'react';\r\n\r\nconst style = {\r\n  logoIcon: {\r\n    width: 200,\r\n    heigth: 100\r\n  },\r\n  bgDark: {\r\n    backgroundColor: `orange`\r\n  }\r\n}\r\n\r\nconst Banner = props => (\r\n  <article style={style.bgDark} className=\"mw7 center ph3 ph5-ns tc br2 pv3 bg-black-90 mb5 animated fadeIn\">\r\n    <img style={style.logoIcon} className='logoIcon' src=\"https://static.posters.cz/image/750/poster/street-fighter-characters-i30393.jpg\" alt=\"streefigther\"/>\r\n    <h2 className=\"fw2 f4 lh-copy mt0 mb3 white animated fadeIn slower\">\r\n   Test your memory, click at the image, if you do not repeat you WIN points, if you repeat you LOSS\r\n    </h2>\r\n  </article>\r\n);\r\n\r\nexport default Banner;","import React from 'react';\r\n\r\n\r\n//Call to the Function  value= {props.id}  onClick { () => props.clickedPlayer(props.id)}\r\n\r\nconst IconCard = props => (\r\n  <section id={props.id} className=\"tc pa3 hvr-float-shadow animated zoomInUp\" value={props.id} onClick={() =>\r\n  props.clickedPlayer(props.id)\r\n  }>\r\n    <article className=\"w4 pa2 \">\r\n      <img src={props.image} className=\"db\" alt=\"game-char\" />\r\n    </article>\r\n  </section>\r\n)\r\n\r\nexport default IconCard;","import React, { Component } from 'react';\nimport './App.css';\nimport NavBar from './components/NavBar';\nimport Banner from './components/Banner';\nimport IconCard from './components/IconCard';\nimport Icons from './icons.json';\n//\nimport \"./components/IconCard.css\";\n\n\n\n//the shuffle Array ramdonly move the elements in the array\nconst shuffleArray = (array) => {\n  let counter = array.length;\n \n  while (counter > 0) {\n      let index = Math.floor(Math.random() * counter);\n      counter--;\n      let temp = array[counter];\n      array[counter] = array[index];\n      array[index] = temp;\n  }\n  return array;\n};\n\n//Here starts the App Component\n\n\nclass App extends Component {\n\n  state = {\n    currentScore: 0,\n    topScore: 0,\n    result: \"\",\n    clicked: [],\n    Icons,      //Contains the Icon Json\n    gameOver: false\n  };\n\n  // When the page loads and the component mounts,\n  // display starting message\n  componentDidMount() {\n    this.setState({result: \"Click a player to get started\"})\n  }\n\n\n  //When the image is clicked, the clcked array is verified and if the id does not incluede the pints increase and the process continues\n  clickedPlayer = (id) => {\n    console.log(`Picture clicked with id: ${id}`);\n    if(!this.state.clicked.includes(id)){\n      this.pointIncrease();\n      this.state.clicked.push(id);\n      this.setState({\n        gameOver: false\n      });\n    } else {\n      this.resetGame();\n    }\n  }\n\n  \n  pointIncrease = () => {\n    let score = this.state.currentScore + 1;\n    console.log(`the score is ${score}`);\n    if (score === this.state.Icons.length) {\n      this.setState({\n        result: \"Congratulations you win! \",\n        topScore: score,\n        currentScore: 0,\n        clicked: [],\n        Icons,\n        gameOver: false\n      });\n    } else if (score > this.state.topScore) {\n      this.setState({\n        topScore: score,\n        currentScore: score,\n        result: \"Correct! You are the new high score\",\n      });\n    } else {\n      this.setState({\n        currentScore: score,\n        result: \"You Guess!\"\n      });\n    }\n    this.resetIconArray();\n  }\n\n  // reset the game when the user chooses a duplicate\n  resetGame = () => {\n    this.setState({\n      points: 0,\n      currentScore:0,\n      topScore: this.state.topScore,\n      result: \"You Loss!\",\n      clicked: [],\n      Icons,\n      gameOver: true\n    });\n    console.log('Game over? ', this.state.gameOver);\n    this.resetIconArray();\n  }\n\n  // Run the function to re-oreder the array again\n  resetIconArray = () => {\n    let newScramble = shuffleArray(Icons);\n    this.setState({Icons: newScramble})\n  }\n\n  render() {\n    return (\n      <div className='container'>\n        <NavBar topScore={this.state.topScore} currentScore={this.state.currentScore} status={this.state.result}/>\n        <Banner />\n        <div className='mainStyle'>\n        {this.state.Icons.map(icon => (\n        <IconCard\n          id={icon.id}\n          image={icon.image}\n          clickedPlayer={this.clickedPlayer}\n        />\n        ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}